## Return (no rewrite) server block.
## http://www.ceps.eu --> https://www.ceps.eu
server {
    listen 80; # IPv4
    server_name www.ceps.eu;
    return 301 https://www.ceps.eu$request_uri; 

} # server domain return.

## http://ceps.eu --> https://www.ceps.eu
server {
    listen 80; # IPv4
    server_name ceps.eu;
    return 301 https://www.ceps.eu$request_uri;

} # server domain return.


## http://ceps.be --> https://www.ceps.eu
server {
    listen 80; # IPv4
    server_name ceps.be;
    return 301 https://www.ceps.eu$request_uri;

} # server domain return.

## http://www.ceps.be --> https://www.ceps.eu
server {
    listen 80; # IPv4
    server_name www.ceps.be;
    return 301 https://www.ceps.eu$request_uri;

} # server domain return.


server {
        listen 443;
        ssl on;
        server_name www.ceps.eu;
	access_log  /var/log/nginx/www.ceps.eu.access.log;
	error_log   /var/log/nginx/www.ceps.eu.error.log;

	# redirect all requests for ceps.eu to the www. subdomain
	if ($host = 'ceps.eu' ) {
	   rewrite  ^/(.*)$  https://www.ceps.eu/$1  permanent;
	  }

        ssl_certificate /etc/ssl/certs/ceps.eu.chained.crt;
        ssl_certificate_key /etc/ssl/private/ceps.eu.key;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	# The recommended cipher suite:
	ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
	# The recommended cipher suite for backwards compatibility (IE6/WinXP):
#	ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
	ssl_prefer_server_ciphers on;
	ssl_session_cache shared:SSL:10m;
	# Enable stronger DHE parameter (4096 bytes insted of 1024)
	ssl_dhparam /etc/ssl/certs/dhparam.pem;


        location / {
        # Pass the request on to backend
        proxy_pass http://127.0.0.1:88;
        # Pass a bunch of headers to the downstream server, so they'll know what's going on.
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;

        # We expect the downsteam servers to redirect to the right hostname, so don't do any rewrites here.
        proxy_redirect     off;
        }
}

