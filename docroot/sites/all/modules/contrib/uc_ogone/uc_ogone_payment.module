<?php  
/**
 * Ogone payment module for Ubercart. No extra gateway needed.
 * For Ogone PSP
 * Please read de "readme.txt'!
 */
module_load_include('inc', 'uc_ogone_payment', 'includes/uc_ogone_payment');
/**
 * Implementation of hook_uc_payment_method().
 */
function uc_ogone_payment_uc_payment_method() {
  $methods['ogone_payment'] = array(
    'name' => t('Ogone Payment'),
    'title' => t('Ogone Payment'),
    'desc' => t('Ogone payment method type.'),
    'callback' => 'uc_payment_method_ogone',
    'weight' => 2,
    'checkout' => TRUE,
    'backend' => TRUE,
  );
  return $methods;
}

/**
 * Implementation of hook_menu().
 */
function uc_ogone_payment_menu() {
  $items = array();

    $items['cart/ogone_return_ok'] = array(
      'title' => 'Ogone Payment return status',
      'page callback' => 'uc_ogone_payment_callback',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );

    $items['cart/checkout/ogone_cancel'] = array(
      'title' => 'Ogone Payment cancel',
      'page callback' => 'uc_ogone_payment_canceled',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );

    $items['ogone_template_call'] = array(
      'title' => 'Ogone Secure Payment',
      'page callback' => 'uc_ogone_template',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );

    // Can be used optionally to let Ogone return the payment status
    // automatically/unmanaged.
    $items['cart/uc_ogone_update_status'] = array(
      'title' => 'Ogone Payment return status',
      'page callback' => 'uc_ogone_payment_callback',
      'page arguments' => array(TRUE),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );

  return $items;
}

/**
 * Implementation of hook_uc_order().
 */
function uc_ogone_payment_uc_order($op, &$order, $arg2) {
  switch ($op) {
    
    case 'delete':
      db_delete('uc_payment_ogone')
          ->condition('order_id', $order->order_id)
          ->execute();      
      //db_query("DELETE FROM {uc_payment_ogone} WHERE order_id = :d", array(':id' => $order->order_id));
      break;
  }
}

/*******************************************************************************
 * Callback Functions
 ******************************************************************************/

/**
 * Callback from hook payment_method
 */
function uc_payment_method_ogone($op, &$order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'cart-details':
      $ogone_payment_brands_enabled = _uc_ogone_payment_brands_enabled();
      if (count($ogone_payment_brands_enabled) && !variable_get('ogone_payment_brands_disabled', TRUE)) {
        return drupal_get_form('uc_ogone_payment_brand_selection_form', $order);
      }
      break;

    case 'cart-process':
     // $order->payment_details['payment_brand'] = $_POST['panes']['uc_ugone_paymentmethod'];
        break;
    case 'cart-review':
     // watchdog ('test',print_r($order,true));
     // $review[] = array('title' => t('Payment method'), 'data' => check_plain($order->payment_details['payment_brand']));
     // return $review;
     break;
    case 'order-view':
    case 'customer-view':
      $payment = db_query_range("SELECT pay_id, payment_method FROM {uc_payment_ogone} WHERE order_id = :id",0,1, array(':id' => $order->order_id))->fetchAssoc();

      if (!empty($payment['pay_id'])) {
        $output = t('Pay ID: @pay_id', array('@pay_id' => $payment['pay_id']));
      }
      if (!empty($payment['payment_method'])) {
        if (!empty($payment['pay_id'])) $output .= '<br />';
        $output .= t('Type: @paymentmethod', array('@paymentmethod' => $payment['payment_method']));
      }
      if (!isset($output)) $output = '';
      return array('#markup' => $output);
      break;
    case 'order-details':
      return drupal_get_form('uc_ogone_payment_method_form', $order);

    case 'edit-process':
      $changes['payment_details']['pm_ogone_description'] = check_plain($_POST['pm_ogone_description']);
      return $changes;

    case 'order-load':
      $description = db_query('SELECT description FROM {uc_payment_ogone} WHERE order_id = :id', array(':id' => $order->order_id))->fetchField();
      if (isset($description)) {
        $order->payment_details['payment_brand'] = $description;
      }
      break;

    case 'order-save':
      $order_id = db_query("SELECT order_id FROM {uc_payment_ogone} WHERE order_id = :id", array(':id' => $order->order_id))->fetchField();
      if (!empty($order_id)) {
        //$sql = "UPDATE {uc_payment_ogone} SET payment_method = '%s' WHERE order_id = %d";
        db_merge('uc_payment_ogone')
          ->key(array(
            'order_id' => $order->order_id,
          ))
          ->fields(array(
            'payment_method' => $order->payment_details['payment_method'],
          ))
          ->execute();
      } 
      else {
        //$sql = "INSERT INTO {uc_payment_ogone} (payment_method, order_id) VALUES ('%s', %d)";
        db_insert('uc_payment_ogone')
          ->key(array(
            'order_id' => $order->order_id,
          ))
          ->fields(array(
            'payment_method' => $order->payment_details['payment_method'],
          ))
          ->execute();
      }
      /*
      db_query($sql,
        $order->payment_details['payment_brand'],
        $order->order_id);*/
      break;

    case 'order-delete':
     // db_query("DELETE FROM {uc_payment_ogone} WHERE order_id = %d", $order->order_id);
        db_delete('uc_payment_ogone')
          ->condition('order_id', $order->order_id)
          ->execute();
      break;
    
    case 'settings':
      if ( !function_exists('uc_ogone_payment_settings_form') ) {
       module_load_include('inc', 'uc_ogone_payment', 'includes/uc_ogone_payment_admin');
      }
      return (uc_ogone_payment_settings_form($order));
      break;
  }
}

function theme_uc_ogone_payment_method_form($form) {
  $output = '<table class="order-edit-table"><tr><td class="oet-label">jdkl'
          . t('Description:') . '</td><td>'
          . drupal_render($form['pm_ogone_description'])
          . '</td></tr></table>';
  return $output;
}

/**
 * Implementation of hook_theme()
 */
function uc_ogone_payment_theme($existing, $type, $theme, $path) {
  return array(
    'uc_ogone_payment_form_brands' => array(
      'render element' => 'form',
    ),
    'uc_ogone_secure_payment_form' => array(
      'template' => 'uc-ogone-secure-payment-form',
      'path' => $path . '/theme',
      'variables' => array(
        'title' => NULL,
        'language' => NULL,
      ),
    ),
  );
}

/**
 * Theme the brands list.
 *
 * @ingroup themeable
 */
function theme_uc_ogone_payment_form_brands($variables) {
  $form = $variables['form'];
  $header = array(t('Order'), t('Payment method'), t('Weight'));
  $table_id = 'ogone-brands';
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'brand-weight', NULL, NULL, FALSE);
  foreach (element_children($form) as $key) {
    // Add class to group weight fields for drag and drop.
    $form[$key]['weight']['#attributes']['class'] = 'brand-weight';

    $row = array('');
    $form[$key]['weight']['#attributes']['class'] = array('term-weight');
    $row[] = drupal_render($form[$key]['list']);
    $row[] = drupal_render($form[$key]['weight']);
    $rows[] = array('data' => $row, 'class' => array('draggable'));
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class'=>array())));  
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Implementation of hook_form_alter().
 */
function uc_ogone_payment_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);

    if ($order->payment_method == 'ogone_payment') {
      drupal_add_css(drupal_get_path('module', 'uc_2checkout') . '/uc_2checkout.css');
      unset($form['submit']);
      $form['#prefix'] = '<table id="two-checkout-review-table"><tr><td>';
      $form['#suffix'] = '</td><td>' . drupal_get_form('uc_ogone_payment_form', $order) . '</td></tr></table>';
    }
  }
}

function uc_ogone_template() {
  $title = filter_xss(variable_get('ogone_layout_title', NULL));
  $language = filter_xss(_uc_ogone_payment_language());
  print theme('uc_ogone_secure_payment_form', $title, $language);
}

function uc_ogone_payment_canceled() {
  drupal_set_message(t('Your order could not be completed because you canceled your payment. Please try again or contact us.'), 'warning');
  if (trim($_GET['orderID'])) {
    //is this required?
    uc_order_update_status(trim($_GET['orderID']), uc_order_state_default('canceled'));
  }
  drupal_goto('cart/checkout');
}


/**
 * Handle free orders (balance is zero or below)
 * @param type $orderid
 * @param type $amount 
 */
function uc_ogone_free_order_confirmed($orderid, $amount) {
  if ($amount>0) {
    drupal_set_message(t('Order total is positive, payment required.'), 'ERROR');
    drupal_goto('cart/checkout');    
  }
  if (!$orderid) {
    drupal_set_message(t('Unknown order'), 'ERROR');
    drupal_goto('cart/checkout');    
  }
  $payment = (object) array(
    'order_id' =>  $orderid,
    'timestamp' => date('c'),
    'pay_id' => 'n/a',
    'payment_date' => date('c'),
    'payment_acceptance' => $arguments['ACCEPTANCE'],
    'payment_method' => t('Free order'),
    'error_code' => '',
    'error_message' => '',
    'order_status' => 9,
    'sha1_test_succes' => 'OK',
  );
  
  
  drupal_write_record('uc_payment_ogone', $payment);
  //uc_order_update_status($orderid, uc_order_state_default('payment_received'));
  uc_order_update_status($orderid, 'payment_received');
  $order = uc_order_load($orderid);
  uc_payment_enter($order->order_id, 'ogone_payment', $order->order_total, 0, NULL, t('Checkout completed for a free order.'));
  // This lets us know it's a legitimate access of the complete page.
  $_SESSION['cart_order'] = $payment->order_id;
 // drupal_goto('cart/ogone_ok');
}



function uc_ogone_payment_uc_checkout_pane() {
    //If payment is done at ogone, skip this pane.
  if (variable_get('ogone_payment_brands_disabled', TRUE) || !variable_get('ogone_select_at_checkout', TRUE)) {
    return array();
  }
  $panes[] = array(
    'id' => 'uc_ugone_paymentmethod',
    'callback' => 'uc_ogone_paymentmethod_pane',
    'title' => t('Payment method selection'),
    'desc' => t("Ogone payment selection: Allow customers to choose payment method during checkout"),
    'weight' => 9,
    'process' => TRUE,
    'collapsible' => TRUE,
  );
  return $panes;
}

function uc_ogone_paymentmethod_pane($op, &$order, &$form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'view':
          $contents['brand'] = array(
            '#title' => t('Pay with'),
            '#type' => 'radios',
            '#default_value' => $order->payment_details['payment_brand'],
            '#options' => _uc_ogone_payment_brands_enabled(),
            '#required' => TRUE,
            );
      return array('contents' => $contents); 

      break;
    case 'process':
      //Todo check $form['brand'] is valid
      $order->payment_details['payment_brand']=$form['brand'];
      break;
    default:
      break;
  }  
}